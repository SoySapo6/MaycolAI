// ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
// ‚ïë üëª ‚úß ùêáùêöùêßùêöùê§ùê®-ùê§ùêÆùêß ùêåùêöùê≤ùêúùê®ùê•ùêÄùêà ùêÅùê®ùê≠ ‚úß üëª ‚ïë
// ‚ïë Hecho por Maycol - Adaptado con tem√°tica Hanako-kun   ‚ïë
// ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

// Importaciones principales de @whiskeysockets/baileys 
const { default: makeWASocket, DisconnectReason, useMultiFileAuthState, fetchLatestBaileysVersion, isJidBroadcast, isJidStatusBroadcast, proto, isJidNewsletter, delay } = require("@whiskeysockets/baileys");

const config = require("./config"); 
const moment = require("moment"); 
const NodeCache = require("node-cache"); 
const pino = require("pino"); 
const { BAILEYS_CREDS_DIR } = require("./config"); 
const { runLite } = require("./index"); 
const { onlyNumbers } = require("./utils/functions"); 
const { 
  textInput, 
  infoLog, 
  warningLog, 
  errorLog, 
  successLog, 
  tutorLog, 
  bannerLog, 
} = require("./utils/terminal");
const { welcome } = require("./welcome");
const chalk = require('chalk'); // Para textos de colores

const msgRetryCounterCache = new NodeCache();

// Crear un logger silencioso para el store 
const storeLogger = pino({ level: 'fatal' });

// Funci√≥n para crear un almac√©n en memoria simple 
function createSimpleStore() { 
  const messages = {};

  return { 
    loadMessage: async (jid, id) => { 
      return messages[`${jid}:${id}`] || null; 
    },

    storeMessage: async (msg) => {
      if (msg.key && msg.key.remoteJid && msg.key.id) {
        messages[`${msg.key.remoteJid}:${msg.key.id}`] = msg;
      }
    },

    bind: (ev) => {
      ev.on('messages.upsert', ({ messages: newMessages }) => {
        for (const msg of newMessages) {
          if (msg.key && msg.key.remoteJid && msg.key.id) {
            messages[`${msg.key.remoteJid}:${msg.key.id}`] = msg;
          }
        }
      });
    }
  }; 
}

// Crear un almac√©n simple 
const store = createSimpleStore();

// Funci√≥n para generar texto arco√≠ris
const rainbowText = (text) => {
  const colors = ['red', 'yellow', 'green', 'cyan', 'blue', 'magenta'];
  let result = '';
  for (let i = 0; i < text.length; i++) {
    const color = colors[i % colors.length];
    result += chalk[color](text[i]);
  }
  return result;
};

// Banner personalizado de Hanako-kun
const customBanner = () => {
  console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë  üëª ‚ô•‚Äø‚ô• ùêáùêöùêßùêöùê§ùê®-ùê§ùêÆùêß ùêåùêöùê≤ùêúùê®ùê•ùêÄùêà ùêÅùê®ùê≠ ‚ô•‚Äø‚ô• üëª  ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  ‚ó¶‚Ä¢‚óè‚óâ‚úø "ùòåùò∑ùò¶ùò≥ùò∫ ùò≠ùò¶ùò®ùò¶ùòØùò• ùò©ùò¢ùò¥ ùò™ùòµùò¥ ùò∞ùò∏ùòØ ùò£ùò∞ùò∂ùòØùò•ùò¢ùò≥ùò™ùò¶ùò¥" ‚úø‚óâ‚óè‚Ä¢‚ó¶  ‚ïë
‚ïë  ‚ãÜÔΩ°¬∞‚ú© ùóòùóπ ùóØùóºùòÅ ùó±ùó≤ùóπ ùóØùóÆùóªÃÉùóº ùó≤ùòÄùòÅùóÆÃÅ ùóπùó∂ùòÄùòÅùóº ùóΩùóÆùóøùóÆ ùó∞ùòÇùó∫ùóΩùóπùó∂ùóø ùòÅùòÇùòÄ ùó±ùó≤ùòÄùó≤ùóºùòÄ! ‚ú©¬∞ÔΩ°‚ãÜ ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
  `);
};

// En lugar de reasignar bannerLog (que es una constante), 
// llamamos directamente a nuestro banner personalizado

// Mostrar el banner personalizado al inicio
customBanner();

let pairingInProgress = false;

async function startConnection() { 
  try {
    // Verificar si ya existe una conexi√≥n activa
    if (global.socketConnection && global.socketConnection.isOnline) {
      console.log(`
‚ï≠¬ª üëª ‚ÑπÔ∏è ùïÄùïüùïóùï†ùï£ùïûùïíùïîùïö√≥ùïü üëª
‚îÇ‚Üí ${rainbowText("Ya existe una conexi√≥n activa")}
‚îÇ‚û´ Evitando m√∫ltiples instancias de Hanako-kun
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
      return global.socketConnection;
    } 
    const { state, saveCreds } = await useMultiFileAuthState(BAILEYS_CREDS_DIR); 
    const { version } = await fetchLatestBaileysVersion();

    const socket = makeWASocket({
      version,
      logger: pino({ level: "error" }), // solo muestra errores importantes
      printQRInTerminal: false,
      defaultQueryTimeoutMs: 60 * 1000,
      auth: state,
      shouldIgnoreJid: (jid) =>
        isJidBroadcast(jid) || isJidStatusBroadcast(jid) || isJidNewsletter(jid),
      keepAliveIntervalMs: 60 * 1000,
      markOnlineOnConnect: true,
      msgRetryCounterCache,
      shouldSyncHistoryMessage: () => false,
      getMessage: async (key) => {
        try {
          const msg = await store.loadMessage(key.remoteJid, key.id);
          return msg ? msg.message : undefined;
        } catch (error) {
          return proto.Message.fromObject({});
        }
      },
    });

    // Enlazar nuestra store personalizada con el socket
    store.bind(socket.ev);

    // Configurar los manejadores de eventos primero
    socket.ev.on("creds.update", saveCreds);
    
    // Variable para controlar intentos de reconexi√≥n
    global.reconnectTimeout = null;
    
    socket.ev.on("connection.update", async (update) => {
      const { connection, lastDisconnect } = update;

      if (connection === "close") {
        const statusCode = lastDisconnect?.error?.output?.statusCode;

        if (statusCode === DisconnectReason.loggedOut) {
          console.log(`
‚ï≠¬ª üëª ¬°ùïÜùïô ùïüùï†! üëª
‚îÇ‚Üí ${rainbowText("El esp√≠ritu de Hanako-kun ha abandonado el ba√±o...")}
‚îÇ‚û´ Borre la carpeta baileys, Bot desconectado Permanentemente
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
          process.exit(1);
        } else {
          // Implementar un retraso exponencial para evitar spam de reconexiones
          const reconnectDelay = global.reconnectAttempts ? Math.min(global.reconnectAttempts * 1000, 30000) : 1000;
          global.reconnectAttempts = (global.reconnectAttempts || 0) + 1;
          
          console.log(`
‚ï≠¬ª üëª ùî∏ùïïùïßùïñùï£ùï•ùïñùïüùïîùïöùïí üëª
‚îÇ‚Üí ${rainbowText("Conexi√≥n perdida. El esp√≠ritu est√° inquieto...")}
‚îÇ‚û´ Intento ${global.reconnectAttempts}. Reconectando en ${reconnectDelay/1000} segundos...
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
          
          // Establecer un l√≠mite de 10 intentos antes de salir
          if (global.reconnectAttempts > 10) {
            console.log(`
‚ï≠¬ª üëª ùîºùï£ùï£ùï†ùï£ ùïîùï£√≠ùï•ùïöùïîùï† üëª
‚îÇ‚Üí ${rainbowText("Demasiados intentos de reconexi√≥n...")}
‚îÇ‚û´ Por favor, verifica tu conexi√≥n e inicia el bot nuevamente
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
            process.exit(1);
          }
          
          // Usar una variable global para el timeout para poder cancelarlo si es necesario
          if (global.reconnectTimeout) clearTimeout(global.reconnectTimeout);
          global.reconnectTimeout = setTimeout(startConnection, reconnectDelay);
        }
      } else if (connection === "open") {
        // Resetear contador de reconexiones cuando se establece la conexi√≥n
        global.reconnectAttempts = 0;
        global.socketConnection = socket;
        global.socketConnection.isOnline = true;
        
        // Limpiar cualquier timeout pendiente
        if (global.reconnectTimeout) {
          clearTimeout(global.reconnectTimeout);
          global.reconnectTimeout = null;
        }
        console.log(`
‚ï≠¬ª üí´ ¬°ùïäùï¶ùïîùïñùï§ùï†! üí´
‚îÇ‚Üí ${rainbowText("¬°El esp√≠ritu de Hanako-kun ha respondido a tu llamado!")}
‚îÇ‚û´ El bot est√° conectado exitosamente
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);

        try {
          // Cambiar la biograf√≠a del perfil del bot
          const nuevaBio = "üëª‚ãÜÔΩ°¬∞‚ú© [ ú·¥Ä…¥·¥Ä·¥ã·¥è-·¥ã·¥ú…¥ ·¥ç·¥Ä è·¥Ñ·¥è ü·¥Ä…™]‚ú©¬∞ÔΩ°‚ãÜ ·¥¥·µâ·∂ú ∞·µí ·µñ·µí ≥ À¢·µí ∏·¥π·µÉ ∏·∂ú·µíÀ°";
          await socket.updateProfileStatus(nuevaBio);
          console.log(`
‚ï≠¬ª üí´ ¬°‚ÑÇùïíùïûùïìùïöùï† ùïñùï©ùïöùï•ùï†ùï§ùï†! üí´
‚îÇ‚Üí ${rainbowText("Biograf√≠a del bot actualizada a:")} 
‚îÇ‚û´ ${nuevaBio}
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
        } catch (error) {
          console.log(`
‚ï≠¬ª üëª ùîºùï£ùï£ùï†ùï£ üëª
‚îÇ‚Üí ${rainbowText("No pude cambiar mi biograf√≠a...")}
‚îÇ‚û´ Error al actualizar la biograf√≠a del bot
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
        }

        // Configurar manejadores de eventos para mensajes cuando la conexi√≥n est√° abierta
        socket.ev.on("messages.upsert", async ({ messages, type }) => {
          const msg = messages[0];
          if (!msg.message) return;

          // Resetear contadores de reconexi√≥n cuando recibimos mensajes
          global.reconnectAttempts = 0;
          global.socketConnection = socket;
          global.socketConnection.isOnline = true;

          const hora = moment().format("HH:mm:ss");
          const isGroup = msg.key.remoteJid.endsWith("@g.us");
          const senderID = isGroup ? msg.key.participant : msg.key.remoteJid;
          const mensajeTexto = msg.message?.conversation || msg.message?.extendedTextMessage?.text;
          const tipoMensaje = mensajeTexto ? mensajeTexto : "Contenido Multimedia o Corrupto";
          const destino = isGroup ? `Grupo: ${msg.key.remoteJid}` : `Privado: ${senderID.replace(/@s\.whatsapp\.net/, "")}`;

          console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë üëª ‚úß ùìóùì™ùì∑ùì™ùì¥ùì∏-ùì¥ùìæùì∑ ùì°ùìÆùì¨ùì≤ùì´ùì≤ùì∏ÃÅ ùìúùìÆùì∑ùìºùì™ùì≥ùìÆ ‚úß üëª ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

‚è∞ („Å£‚óî‚ó°‚óî)„Å£ ${rainbowText("ùëØùíêùíìùíÇ:")}: ${hora}
‚úâÔ∏è ‚äÇ(‚óâ‚Äø‚óâ)„Å§ ${rainbowText("ùëªùíäùíëùíê ùíÖùíÜ ùë¥ùíÜùíèùíîùíÇùíãùíÜ:")}: ${tipoMensaje}
‡ºÑ ‚ÇäÀö ${rainbowText("ùëµùíñÃÅùíéùíÜùíìùíê/ùëÆùíìùíñùíëùíê:")}: ${destino} Àö‚Çä ‡ºÑ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‡ºª‚úß‡º∫‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üëª *${config.BOT_NAME}* te observa desde el ba√±o del tercer piso...
"${rainbowText("¬°Concede mi deseo, Hanako-kun!")}" ‚ÇäÀö‚úß
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‡ºª‚úß‡º∫‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`);

          runLite({ socket, data: { messages, type } });
        });
        
        socket.ev.on("group-participants.update", (data) => welcome({ socket, data }));
      }
    });

    // Proceso de vinculaci√≥n (si es necesario)
    if (!socket.authState.creds.registered && !pairingInProgress) {
      pairingInProgress = true;
      
      console.log(`
‚ï≠¬ª üëª ùî∏ùïïùïßùïñùï£ùï•ùïñùïüùïîùïöùïí üëª
‚îÇ‚Üí ${rainbowText("¬°Hanako-kun necesita ser invocado!")}
‚îÇ‚û´ Archivos necesarios no Encontrados.
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);

      // Mostrar el banner personalizado de nuevo para asegurarnos que est√© visible
      customBanner();

      const startPairing = async () => {
        try {
          const enableTutor = await textInput(`[üëª ${rainbowText("ùïÑùïíùï™ùïîùï†ùïùùî∏ùïÄ")}: INPUT] ¬øDeseas un tutorial? s/n : `);
          
          if (!["s", "n"].includes(enableTutor.toLowerCase())) {
            console.log(`
‚ï≠¬ª üëª ùîºùï£ùï£ùï†ùï£ üëª
‚îÇ‚Üí ${rainbowText("Opci√≥n inv√°lida, debes escribir 's' o 'n'")}
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
            return await startPairing();
          }

          const phoneNumber = await textInput(`[üëª ${rainbowText("ùïÑùïíùï™ùïîùï†ùïùùî∏ùïÄ")}: INPUT] Ingrese su n√∫mero: `);

          if (!phoneNumber || !onlyNumbers(phoneNumber)) {
            console.log(`
‚ï≠¬ª üëª ùîºùï£ùï£ùï†ùï£ üëª
‚îÇ‚Üí ${rainbowText("N√∫mero incorrecto, Ejemplo: 51921826291.")}
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
            process.exit(1);
          }

          if (enableTutor.toLowerCase() === "s") {
            await delay(1000);
            console.log(`
‚ï≠¬ª üëª ùïãùï¶ùï•ùï†ùï£ùïöùïíùïù üëª
‚îÇ‚Üí ${rainbowText("Estamos invocando a Hanako-kun... Recuerda:")}
‚îÇ‚û´ Para invocar correctamente, golpea la puerta del ba√±o 3 veces y di su nombre
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
            await delay(5000);
            console.log(`
‚ï≠¬ª üëª ‚Ñôùï£ùï†ùïòùï£ùïñùï§ùï† üëª
‚îÇ‚Üí ${rainbowText("‚åõ Preparando ritual de invocaci√≥n...")} 
‚îÇ‚û´ 25% completado
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
            await delay(8000);
            console.log(`
‚ï≠¬ª üëª ‚Ñôùï£ùï†ùïòùï£ùïñùï§ùï† üëª
‚îÇ‚Üí ${rainbowText("‚åõ Buscando a Hanako-kun en el ba√±o...")}
‚îÇ‚û´ 50% completado
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
            await delay(8000);
            console.log(`
‚ï≠¬ª üëª ‚Ñôùï£ùï†ùïòùï£ùïñùï§ùï† üëª
‚îÇ‚Üí ${rainbowText("‚åõ Hanako-kun est√° escuchando...")}
‚îÇ‚û´ 75% completado
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
            await delay(8000);
            console.log(`
‚ï≠¬ª üëª ¬°ùïäùï¶ùïîùïñùï§ùï†! üëª
‚îÇ‚Üí ${rainbowText("‚úÖ ¬°Hanako-kun ha sido invocado!")}
‚îÇ‚û´ Enviando c√≥digo de vinculaci√≥n...
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
            await delay(3000);
          }

          const code = await socket.requestPairingCode(onlyNumbers(phoneNumber));
          console.log(`
‚ï≠¬ª üëª ‚ÑÇùï†ÃÅùïïùïöùïòùï† ùïïùïñ ùïßùïöùïüùïîùï¶ùïùùïíùïîùïöùï†ÃÅùïü üëª
‚îÇ‚Üí ${rainbowText("Tu c√≥digo para invocar a Hanako-kun es:")}
‚îÇ‚û´ ${code}
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
          
          console.log(`
‚ï≠¬ª üëª ùïÄùïüùï§ùï•ùï£ùï¶ùïîùïîùïöùï†ùïüùïñùï§ üëª
‚îÇ‚Üí ${rainbowText("Por favor, complete el proceso de vinculaci√≥n")}
‚îÇ‚û´ Ingresa el c√≥digo en tu WhatsApp para completar el ritual
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
          console.log(`
‚ï≠¬ª üëª ùîºùï§ùï°ùïñùï£ùïíùïüùïïùï† üëª
‚îÇ‚Üí ${rainbowText("Esperando a que se complete la invocaci√≥n...")}
‚îÇ‚û´ Hanako-kun est√° ansioso por conocerte
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
          
        } catch (error) {
          console.log(`
‚ï≠¬ª üëª ùîºùï£ùï£ùï†ùï£ ùïïùï¶ùï£ùïíùïüùï•ùïñ ùïßùïöùïüùïîùï¶ùïùùïíùïîùïöùï†ÃÅùïü üëª
‚îÇ‚Üí ${rainbowText("Algo ha interrumpido la invocaci√≥n:")}
‚îÇ‚û´ ${error.message}
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
          pairingInProgress = false;
        }
      };

      await startPairing();
      pairingInProgress = false;
    }

    return socket;
  } catch (error) { 
    console.log(`
‚ï≠¬ª üëª ùîºùï£ùï£ùï†ùï£ ùïïùïñ ùïîùï†ùïüùïñùï©ùïöùï†ÃÅùïü üëª
‚îÇ‚Üí ${rainbowText("Hanako-kun no responde:")} 
‚îÇ‚û´ ${error.message}
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
    
    const reconnectDelay = global.reconnectAttempts ? Math.min(global.reconnectAttempts * 2000, 30000) : 2000;
    global.reconnectAttempts = (global.reconnectAttempts || 0) + 1;
    
    console.log(`
‚ï≠¬ª üëª ‚Ñùùïñùïöùïüùï•ùïñùïüùï•ùïíùïüùïïùï† üëª
‚îÇ‚Üí ${rainbowText("Intentando invocar nuevamente en " + reconnectDelay/1000 + " segundos...")}
‚îÇ‚û´ Intento ${global.reconnectAttempts} de 10
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
    
    // Limitar intentos tambi√©n aqu√≠
    if (global.reconnectAttempts > 10) {
      console.log(`
‚ï≠¬ª üëª ùîºùï£ùï£ùï†ùï£ ùïîùï£√≠ùï•ùïöùïîùï† üëª
‚îÇ‚Üí ${rainbowText("Demasiados intentos de reconexi√≥n...")}
‚îÇ‚û´ Por favor, verifica tu conexi√≥n e inicia el bot nuevamente
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
      process.exit(1);
    }
    
    // Usar una variable global para el timeout para poder cancelarlo si es necesario
    if (global.reconnectTimeout) clearTimeout(global.reconnectTimeout);
    global.reconnectTimeout = setTimeout(startConnection, reconnectDelay);
    return null; 
  } 
}

// Variables globales para el control de conexi√≥n y reconexi√≥n
global.reconnectAttempts = 0;
global.reconnectTimeout = null;
global.socketConnection = null;

// Iniciar el bot una √∫nica vez, evitando m√∫ltiples instancias
if (!global.botInitialized) {
  global.botInitialized = true;
  const mainBot = startConnection();
} else {
  console.log(`
‚ï≠¬ª üëª ‚ÑπÔ∏è ùïÄùïüùïóùï†ùï£ùïûùïíùïîùïö√≥ùïü üëª
‚îÇ‚Üí ${rainbowText("El bot ya est√° inicializado")}
‚îÇ‚û´ Evitando m√∫ltiples instancias de Hanako-kun
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
}

// Manejo global de errores para evitar que el bot se cierre 
process.on("uncaughtException", function (err) { 
  if (!err.message.includes("No SenderKeyRecord found")) { 
    console.log(`
‚ï≠¬ª üëª ùîºùï©ùïîùïñùï°ùïîùïöùï†ÃÅùïü ùïüùï† ùïîùï†ùïüùï•ùï£ùï†ùïùùïíùïïùïí üëª
‚îÇ‚Üí ${rainbowText("Hanako-kun encontr√≥ un problema:")}
‚îÇ‚û´ ${err}
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
  } 
});

process.on("unhandledRejection", function (reason) { 
  if (!String(reason).includes("No SenderKeyRecord found")) { 
    console.log(`
‚ï≠¬ª üëª ‚Ñùùïñùïîùïôùïíùï´ùï† ùïüùï† ùïîùï†ùïüùï•ùï£ùï†ùïùùïíùïïùï† üëª
‚îÇ‚Üí ${rainbowText("Hanako-kun no pudo cumplir un deseo:")}
‚îÇ‚û´ ${reason}
‚ï∞‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï ‚Äï „ÄÑ ‚Ü∫`);
  } 
});
